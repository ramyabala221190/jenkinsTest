/* groovylint-disable NestedBlockDepth */
/* groovylint-disable-next-line CompileStatic */

pipeline {
    agent any

    options {
        skipDefaultCheckout(true)
        timestamps() //Add timestamps to the Console Output
    }

    environment{
        DOCKER_HUB_CRED=credentials('dockerHubRegistryCredentials')
    }

    stages{
        stage('Docker Workflow') {
            stages{
                stage('Clone') {
                    steps {
                        echo 'Cloning...'
                       // cleanWs() //Workspace Clean Plugin to delete the workspace before cloning and building
                        //we are using the installed Git plugin to clone the branch from the repo
                        git branch: "${env.Branch}", changelog: false,
                        credentialsId: 'b2b655c9-f74f-4813-8dfd-f2a565931b80',
                        poll: false, url: 'https://github.com/ramyabala221190/jenkinsTest.git'
                    }
                }
              
                stage('Docker Build') {
                    steps {
                        echo 'Running Docker Compose build'
                        bat "docker compose build --build-arg env=${environment}"
                    }
                }
                stage('Docker Push') {
                    steps{
                        echo 'Retagging image and Pushing image'
                        bat  "docker login -u ${DOCKER_HUB_CRED_USR} --password ${DOCKER_HUB_CRED_PSW}"
                        //bat "docker image tag ngnix-image:latest dockerenthusiast1992/learningdocker1992:${env.BUILD_NUMBER}"
                        // bat "docker image push dockerenthusiast1992/learningdocker1992:${env.BUILD_NUMBER}"
                        bat "docker image push nginx-image:latest"
                    }
                }
                stage('Docker Compose Up') {
                    
                    steps {
                        echo 'Running Docker Compose Up'
                        script{
                            bat "docker compose up -d" //- d ensures it runs in deatched mode
                            /*
This will recreate if there are any existing containers with the same name. If not it will create new containers
                            */
                        }
                    }
                }
            }
        }
    }
}