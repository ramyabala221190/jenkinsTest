/* groovylint-disable NestedBlockDepth */
/* groovylint-disable-next-line CompileStatic */


pipeline {
    agent any

    options {
        skipDefaultCheckout(true)
        timestamps() //Add timestamps to the Console Output
    }

    environment{
        DOCKER_HUB_CRED=credentials('dockerHubRegistryCredentials') //pulling the DockerHub crendetials saved in Jenkins-->Dashboard--->Credentials
        appPort= envPortMapping()
        containerPort=80
    }

    stages{
        stage('Docker Workflow') {
            stages{
                stage('Clone') {
                    steps {
                        echo 'Cloning...'
                        cleanWs() //Workspace Clean Plugin to delete the workspace before cloning and building
                        //we are using the installed Git plugin to clone the branch from the repo
                        git branch: "${env.Branch}", changelog: false,
                        credentialsId: 'b2b655c9-f74f-4813-8dfd-f2a565931b80',
                        poll: false, url: 'https://github.com/ramyabala221190/jenkinsTest.git'
                    }
                }
              
                stage('Docker Build') {
                    steps {
                        echo "${environment}"
                        echo 'Running Docker Compose build'
                        bat  "docker compose build --build-arg env=${environment}"
                    }
                }
                stage('Docker Push') {
                    steps{
                        echo 'Retagging image and Pushing image to DockerHub'
                        bat  "docker login -u ${DOCKER_HUB_CRED_USR} -p ${DOCKER_HUB_CRED_PSW} docker.io"
                        bat  "docker image prune --force"  /* removes all dangling images. Will not remove unused images. --force tag ensures no prompt for confirmation will be there*/
                        bat  "docker tag ${DOCKER_HUB_CRED_USR}/ngnix-image ${DOCKER_HUB_CRED_USR}/ngnix-image:${env.BUILD_NUMBER}-${environment}"
                        /*
The same image with different tags will have the same image id. Its the same image tagged differently.
format of the image is <username>/<image-name>:tag. If you provide no tag it is assumed to be latest
                        */
                        bat ""
                        bat  "docker push ${DOCKER_HUB_CRED_USR}/ngnix-image:${env.BUILD_NUMBER}-${environment}"
                        bat  "docker push ${DOCKER_HUB_CRED_USR}/ngnix-image"

                    }
                    post {
                        success {
                            bat "docker logout" //logout from docker
                        }
                    }
                }
                stage('Docker Compose Up') {
                    
                    steps {
                        echo 'Running Docker Compose Up'
                        script{
                            bat "docker compose up -d" //- d ensures it runs in deatched mode
                            /*
This will recreate if there are any existing containers with the same name. If not it will create new containers
                            */
                        }
                    }
                }
            }
        }
    }

}

def envPortMapping(){
    //echo "${env}"
    echo "${env.environment}"
    if(${env.environment}.equals("dev")){
        return 8082
    }
    else if(${env.environment}.equals("prod")){
        return 8083
    }
}
