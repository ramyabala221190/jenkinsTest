/* groovylint-disable NestedBlockDepth */
/* groovylint-disable-next-line CompileStatic */


pipeline {
    agent any

    options {
        skipDefaultCheckout(true) //prevent default checkout of git branch
        timestamps() //Add timestamps to the Console Output
    }

    environment{
        DOCKER_HUB_CRED=credentials('dockerHubRegistryCredentials') //pulling the DockerHub crendetials saved in Jenkins-->Dashboard--->Credentials
        environ="${env.environment}" //environment info from pipeline input
        appPort=envPortMapping(env.environment) //decide the application port based on the environment
        containerPort=80 //fix the container port
        fromRepositoryName="angular-nginx-dev"
        toRepositoryName="angular-nginx-${env.environment}"
        containerName="angular-nginx-${env.environment}-container"
        baseImageName="angular-nginx"
    }

    stages{
        stage('Docker Workflow') {
            stages{
                stage('Clone') {
                    steps {
                        echo 'Cloning...'
                        cleanWs() //Workspace Clean Plugin to delete the workspace before cloning and building
                        //we are using the installed Git plugin to clone the branch from the repo
                        git branch: "${env.Branch}", url: 'https://github.com/ramyabala221190/jenkinsTest.git'
                    }
                }
              
                stage('Docker Build') {
                     when {
                        environment name: 'environment', value: 'dev'
                    }
                    steps {
                        echo 'Running Docker Compose build'
                        bat  "docker compose -f docker/docker-compose.yml build"
                        //bat "docker build . -f docker/Dockerfile --build-arg env='dev' --build-arg port=8082"
                    }
                }

                stage('Docker Pull and Tag Image') {
                   when {
                        environment name: 'environment', value: 'prod'
                    }
                    steps{
                        echo 'Pulling latest image from low enviornment repository in DockerHub'
                        bat "docker image pull ${DOCKER_HUB_CRED_USR}/${fromRepositoryName}:latest"
                        bat "docker image tag ${DOCKER_HUB_CRED_USR}/${fromRepositoryName} ${DOCKER_HUB_CRED_USR}/${toRepositoryName}:${env.BUILD_NUMBER}"
                        bat "docker image tag ${DOCKER_HUB_CRED_USR}/${fromRepositoryName} ${DOCKER_HUB_CRED_USR}/${toRepositoryName}:latest"

                    }  
                }

                stage('Docker Tag Image in Dev'){
                      when {
                        environment name: 'environment', value: 'dev'
                    }
                    steps{
                        bat  "docker image tag angular-nginx ${DOCKER_HUB_CRED_USR}/${toRepositoryName}:${env.BUILD_NUMBER}"
                        bat  "docker image tag angular-nginx ${DOCKER_HUB_CRED_USR}/${toRepositoryName}:latest"  
                    }
                }
                stage('Docker login'){
                    steps {
                   echo 'Logging in to DockerHub'
                       bat  "docker login -u ${DOCKER_HUB_CRED_USR} -p ${DOCKER_HUB_CRED_PSW} docker.io"
                       bat  "docker image prune --force"
                    }
                }
                stage('Docker Push') {
                    
                    steps{
                        echo 'Pushing image to DockerHub'
                        /*
We have built an image with the name :angular-nginx-image as specified in the docker-compose.yml. We need to tag this image to the format:
DockerhubUsername/DockerHubRepoName/some-image-name:tag
Not that the tagged image is pushed to the Docker hub.
https://docs.docker.com/get-started/04_sharing_app/ Refer to this for more details on this step
The same image with different tags will have the same image id. Its the same image tagged differently.*/
                        bat  "docker image push --all-tags ${DOCKER_HUB_CRED_USR}/${toRepositoryName}"


                    }
                    post {
                        success {
                            bat "docker logout" //logout from docker
                        }
                    }
                }
                stage('Docker Compose Up') {
                    
                    steps {
                        echo 'Running Docker Compose Up'
                        script{
                            bat "docker compose -f docker/docker-compose.yml up -d --force-recreate" //- d ensures it runs in deatched mode
                            //bat "docker cp docker/${env.environment}.config.json ${containerName}:/usr/share/nginx/html/assets/runtime-environment.json"
                            /*
This will recreate if there are any existing containers with the same name. If not it will create new containers
                            */
                        }
                    }
                }
            }
        }
    }

}

def envPortMapping(envName){

    if(envName.equals("dev")){
        return 8082;
    }
    else if(envName.equals("prod")) {
        return 8083;
    }
}
